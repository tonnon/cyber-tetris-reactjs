{"version":3,"sources":["img/bg.gif","gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","Stage","key","StyledDisplay","gameOver","Display","text","StyledButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","console","log","dropPlayer","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","keyCode","move","onKeyUp","class","icon","faAngleLeft","faAngleRight","faAngleDown","faRedo","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5bd112f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.4439d43e.gif\";","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, 'clear']),\r\n  );\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // 1. Check that we're on an actual Tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. Check that our move is inside the game areas height (y)\r\n          // We shouldn't go through the bottom of the play area\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3. Check that our move is inside the game areas width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // 4. Check that the cell wer'e moving to isn't set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            'clear'\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};","import styled from 'styled-components';\r\n\r\nimport bgImage from '../../img/bg.gif';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n    background: url(${bgImage}) #000;\r\n    background-size: 1900px;\r\n    background-position: center;\r\n    overflow: hidden;\r\n    background-position: -62px -478px;\r\n    overflow: hidden;\r\n    background-repeat: no-repeat;\r\n`\r\nexport const StyledTetris = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    padding: 60px;\r\n    margin: 0 auto;\r\n    max-width: 900px\r\n\r\n    aside {\r\n        width: 100%;\r\n        max-width: 200px;\r\n        display: block\r\n        padding: 0 20px;\r\n    }\r\n\r\n    @media screen and (min-width: 320px) and (max-width: 768px) {\r\n        padding: 10px;\r\n        display: block;\r\n\r\n        aside {\r\n            display: flex;\r\n            margin-top: -475px;\r\n            padding: 0;\r\n        }\r\n    }\r\n`","export const TETROMINOS = {\r\n    0: { shape: [[0]], color: '0, 0, 0'},\r\n    I: {\r\n        shape: [\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n            [0, 'I', 0, 0],\r\n        ],\r\n        color: '41, 93, 251',\r\n    },\r\n    J: {\r\n        shape: [\r\n            [0, 'J', 0],\r\n            [0, 'J', 0],\r\n            ['J', 'J', 0],\r\n        ],\r\n        color: '244, 46, 241',\r\n    },\r\n    L: {\r\n        shape: [\r\n            [0, 'L', 0],\r\n            [0, 'L', 0],\r\n            [0, 'L', 'L'],\r\n        ],\r\n        color: '233, 36, 88',\r\n    },\r\n    O: {\r\n        shape: [\r\n            ['O', 'O'],\r\n            ['O', 'O'],\r\n        ],\r\n        color: '255, 255, 130',\r\n    },\r\n    S: {\r\n        shape: [\r\n            [0, 'S', 'S'],\r\n            ['S', 'S', 0],\r\n            [0, 0, 0],\r\n        ],\r\n        color: '173, 92, 36',\r\n    },\r\n    T: {\r\n        shape: [\r\n            [0, 0, 0],\r\n            ['T', 'T','T'],\r\n            [0, 'T', 0],\r\n        ],\r\n        color: '129, 242, 196',\r\n    },\r\n    Z: {\r\n        shape: [\r\n            ['Z', 'Z', 0],\r\n            [0, 'Z','Z'],\r\n            [0, 0, 0],\r\n        ],\r\n        color: '75, 222, 222',\r\n    },\r\n}\r\n\r\nexport const randomTetromino = () => {\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n    return TETROMINOS[randTetromino];\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n          return ack;\r\n        }\r\n        ack.push(row);\r\n        return ack;\r\n      }, [])\r\n\r\n    const updateStage = prevStage => {\r\n      // First flush the stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\r\n      );\r\n\r\n      // Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? 'merged' : 'clear'}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      // Then check if we collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n      return newStage;\r\n    };\r\n\r\n    setStage(prev => updateStage(prev));\r\n  }, [player, resetPlayer]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(\r\n        ${props => props.height},\r\n        calc(28vw / ${props => props.width})\r\n    );\r\n    grid-template-columns: repeat(${props => props.width}, 1fr);\r\n    grid-gap: 1px;\r\n    color: #D895FD;\r\n    border: 2px solid;\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    max-width: 28vw;\r\n    background: rgba(0, 0, 0,0.7);\r\n    box-shadow: \r\n    0 1px 2px rgba(0,0,0, 0.6), \r\n    2px 1px 4px rgba(0,0,0, 0.3), \r\n    2px 4px 3px rgba(71,17,100, 0.3), \r\n    0 0 7px 2px  rgba(187, 38, 210, 0.6),\r\n    inset 0 1px 2px rgba(0,0,0, 0.6), \r\n    inset 2px 1px 4px rgba(71,17,100, 0.3), \r\n    inset 2px 4px 3px rgba(71,17,100, 0.6),\r\n    inset 0 0 7px 2px rgba(71,17,100, 0.6);\r\n    text-shadow:\r\n    -2px 4px 4px #471164, \r\n    0 0 10px #b22cfb,\r\n    inset 1px 1px 1px white;\r\n    @media screen and (min-width: 320px) and (max-width: 768px) {\r\n        margin-top: 55px;\r\n        max-width: 75vw;\r\n        grid-template-rows: repeat(\r\n            ${props => props.height},\r\n            calc(75vw / ${props => props.width})\r\n        );\r\n        grid-template-columns: repeat(${props => props.width}, 1fr);\r\n        margin-left: 28px;\r\n    }\r\n`","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n    width: auto;\r\n    background: rgba(${props => props.color}, 0.8);\r\n    border: ${props => (props.type === 0 ? '0px solid': '4px solid')};\r\n    border-bottom-color: rgba(${props => props.color}, 0.1);\r\n    border-right-color: rgba(${props => props.color}, 1);\r\n    border-top-color: rgba(${props => props.color}, 1);\r\n    border-left-color: rgba(${props => props.color}, 0.3);\r\n    box-shadow: 0 0 20px rgba(${props => props.color}, 0.8);\r\n`","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\nconst Cell = ({ type }) => (\r\n    <StyledCell type={type} color={TETROMINOS[type].color} />\r\n);\r\n\r\nexport default React.memo(Cell);","import React from 'react';\r\nimport { StyledStage } from './styles/StyledStage'\r\n\r\nimport Cell from './Cell';\r\n\r\nconst Stage = ({ stage }) => (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n        {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n    </StyledStage>\r\n);\r\n\r\nexport default Stage;","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    border 4px solid #091243;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    color: ${props => (props.gameOver ? 'red' : '#999')};\r\n    background: #000;\r\n    font-family: Pixel, Arial, helvetica, sans-serif;\r\n    font-size: 0.8rem;\r\n    background: rgba(0, 0, 0,0.7);\r\n    border-radius: 50px\r\n    box-shadow: \r\n    0 1px 2px rgba(0,0,0, 0.6), \r\n    2px 1px 4px rgba(0,0,0, 0.3), \r\n    2px 4px 3px rgba(71,17,100, 0.3), \r\n    0 0 7px 2px  rgba(187, 38, 210, 0.6),\r\n    inset 0 1px 2px rgba(0,0,0, 0.6), \r\n    inset 2px 1px 4px rgba(71,17,100, 0.3), \r\n    inset 2px 4px 3px rgba(71,17,100, 0.6),\r\n    inset 0 0 7px 2px rgba(71,17,100, 0.6);\r\n    text-shadow:\r\n    -2px 4px 4px #471164, \r\n    0 0 10px #b22cfb,\r\n    inset 1px 1px 1px white;\r\n    color: #D895FD;\r\n    border: 2px solid;\r\n\r\n    @media screen and (min-width: 320px) and (max-width: 768px) {\r\n      padding: 5px 26px 5px 20px;\r\n      font-size: 10px;\r\n      width: 74px;\r\n    }\r\n`","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n    <StyledDisplay gameOver={gameOver}>\r\n        {text}\r\n    </StyledDisplay>\r\n);\r\n\r\nexport default Display;","import styled from 'styled-components';\r\n\r\nexport const StyledButton = styled.button`\r\ndisplay: block;\r\n  margin: auto;\r\n  padding: 1rem 1.25rem;\r\n  font-family: Pixel, Arial, helvetica, sans-serif;\r\n  font-size: 1.5rem;\r\n  text-decoration: none;\r\n  text-shadow:\r\n    -2px 4px 4px #091243, \r\n    0 0 10px #00D0FF,\r\n    inset 1px 1px 1px white;\r\n  color: #1FFFFF;\r\n  border: 2px solid;\r\n  border-radius: 4px;\r\n  background-color: transparent;\r\n  box-shadow: \r\n    0 1px 2px rgba(0,0,0, 0.6), \r\n    2px 1px 4px rgba(0,0,0, 0.3), \r\n    2px 4px 3px rgba(3,0,128, 0.3), \r\n    0 0 7px 2px rgba(0,208,255, 0.6), \r\n    inset 0 1px 2px rgba(0,0,0, 0.6), \r\n    inset 2px 1px 4px rgba(0,0,0, 0.3), \r\n    inset 2px 4px 3px rgba(3,0,128, 0.3), \r\n    inset 0 0 7px 2px rgba(0,208,255, 0.6);\r\n  animation: flickering 5s infinite;\r\n  background: rgba(0, 0, 0,0.7);\r\n  border-radius: 50px\r\n  @media screen and (min-width: 320px) and (max-width: 768px) {\r\n    width: 253px;\r\n    padding: 5px 26px 5px 20px;\r\n    font-size: 10px;\r\n    margin-top: -1px;\r\n  }\r\n`","import React from 'react';\r\nimport { StyledButton } from './styles/StyledButton';\r\n\r\nconst StartButton = ({ callback }) => (\r\n    <StyledButton onClick={callback}>\r\n        Start Game\r\n    </StyledButton>\r\n);\r\n\r\nexport default StartButton;","import React, { useState } from 'react';\r\nimport '../App.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCoffee, faAngleLeft, faAngleRight, faAngleDown, faRedo } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\n\r\n// Styled Components\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\n\r\n// Custom Hooks\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\n\r\n// Components\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  }\r\n\r\n  const startGame = () => {\r\n    console.log(\"test\")\r\n    // Reset everything\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setLevel(0);\r\n    setRows(0);\r\n  };\r\n\r\n  const drop = () => {\r\n    if(rows > (level + 1) * 10) {\r\n      setLevel(prev => prev + 1);\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false })\r\n    } else {\r\n      // Game Over\r\n      if (player.pos.y < 1) {\r\n        console.log(\"GAME OVER!!!\");\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  }\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if(!gameOver) {\r\n      if(keyCode === 40){\r\n        setDropTime(1000 / (level + 1) + 200);\r\n      }\r\n    }\r\n  }\r\n\r\n  const dropPlayer = () => {\r\n    setDropTime(null);\r\n    drop();\r\n  }\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if (keyCode === 38) {\r\n        playerRotate(stage, 1);\r\n      }\r\n    }\r\n  }\r\n  const moveLeft = () => {\r\n    movePlayer(-1);\r\n  }\r\n  const moveRight = () => {\r\n    movePlayer(1);\r\n  }\r\n  const rotate = () => {\r\n    playerRotate(stage, 1);\r\n  }\r\n  const moveDown = () => {\r\n    dropPlayer();\r\n    setDropTime(1000 / (level + 1) + 200);\r\n  }\r\n\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime)\r\n\r\n  return (\r\n    <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp}>\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div class=\"display-contaier\">\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`Rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n      <div class=\"btn-container\">\r\n        <button onClick={moveLeft} class=\"btn\">\r\n          <FontAwesomeIcon icon={faAngleLeft} />\r\n        </button>\r\n        <button onClick={moveRight} class=\"btn\">\r\n          <FontAwesomeIcon icon={faAngleRight} />\r\n        </button>\r\n        <button onClick={moveDown} class=\"btn\">\r\n          <FontAwesomeIcon icon={faAngleDown} />\r\n        </button>\r\n        <button onClick={rotate} class=\"btn\">\r\n          <FontAwesomeIcon icon={faRedo} />\r\n        </button>\r\n      </div>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;","import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false,\r\n  });\r\n\r\n  const rotate = (matrix, dir) => {\r\n    // Make the rows to become cols (transpose)\r\n    const rotatedTetro = matrix.map((_, index) =>\r\n      matrix.map(col => col[index]),\r\n    );\r\n    // Reverse each row to get a rotated matrix\r\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\r\n    return rotatedTetro.reverse();\r\n  };\r\n\r\n  const playerRotate = (stage, dir) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while(checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer);\r\n  };\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer(prev => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided,\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n    const [score, setScore] = useState(0);\r\n    const [rows, setRows] = useState(0);\r\n    const [level, setLevel] = useState(0);\r\n\r\n    const linePoints = [40, 100, 300, 1200];\r\n\r\n    const calcScore = useCallback(() => {\r\n        if(rowsCleared > 0) {\r\n            setScore(prev => prev + linePoints[rowsCleared -1] * (level + 1));\r\n            setRows(prev => prev + rowsCleared);\r\n\r\n        }\r\n    }, [level, linePoints, rowsCleared]); \r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, score])\r\n\r\n    return [score, setScore, rows, setRows, level, setLevel];\r\n}","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}","import React from 'react';\r\nimport Tetris from './components/Tetris';\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <Tetris/>\r\n    \r\n  </div>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}